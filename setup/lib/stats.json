{"errors":[],"warnings":[],"version":"3.8.1","hash":"e7f412019d90ff8d9cf4","publicPath":"","assetsByChunkName":{"main":"chat-engine-setup.js"},"assets":[{"name":"chat-engine-setup.js","size":17664,"chunks":[0],"chunkNames":["main"],"emitted":true},{"name":"stats.json","size":0,"chunks":[],"chunkNames":[]}],"filteredAssets":0,"entrypoints":{"main":{"chunks":[0],"assets":["chat-engine-setup.js"]}},"chunks":[{"id":0,"rendered":true,"initial":true,"entry":true,"extraAsync":false,"size":52611,"names":["main"],"files":["chat-engine-setup.js"],"hash":"b6aa2947c4b0b2e1a922","parents":[],"modules":[{"id":0,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\utils.js","name":"./setup/src/utils.js","index":9,"index2":6,"size":668,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":4,"building":5},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./utils","loc":"6:14-32"},{"moduleId":8,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./utils","loc":"2:14-32"},{"moduleId":9,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_blocks.js","module":"./setup/src/setup_blocks.js","moduleName":"./setup/src/setup_blocks.js","type":"cjs require","userRequest":"./utils","loc":"1:14-32"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"\r\nconst findCookie = (name) => {\r\n    let cookies = document.cookie.split(';');\r\n    let result = null;\r\n\r\n    cookies.forEach((cookie) => {\r\n        let cookieName = cookie.split('=')[0];\r\n        let cookieValue = cookie.split('=')[1];\r\n\r\n        if (cookieName.endsWith(name)) {\r\n            result = cookieValue;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\nconst callbackWithError = (err, defaultMessage, callback) => {\r\n    if (err && err.responseJSON && err.responseJSON.message) {\r\n        return callback(err.responseJSON.message);\r\n    } else {\r\n        return callback(defaultMessage);\r\n    }\r\n};\r\n\r\nmodule.exports = { findCookie, callbackWithError };\r\n"},{"id":1,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","name":"./setup/src/script.js","index":0,"index2":9,"size":6411,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"issuerId":null,"issuerName":null,"profile":{"factory":5,"building":2},"failed":false,"errors":0,"warnings":0,"reasons":[],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":0,"source":"// polyfill Promise\r\nrequire('es6-promise/auto');\r\n\r\nconst Client = require('./client');\r\nconst ProvisionAccount = require('./setup_account');\r\nconst utils = require('./utils');\r\n\r\n\r\nconst extractError = (err) => {\r\n    if (err && err.responseJSON && err.responseJSON.error) {\r\n        return err.responseJSON.error;\r\n    }\r\n};\r\n\r\nmodule.exports = class {\r\n\r\n    constructor() {\r\n        this.loginElement = $('#login');\r\n        this.provisionElement = $('#setup');\r\n        this.loadElement = $('#load');\r\n        this.errorElement = $('#error');\r\n        this.errorOutElement = $('#error-out');\r\n        this.statusElement = $('#status');\r\n        this.codeElement = $('#code');\r\n        this.outputElement = $('#output');\r\n        this.emailElement = $('#email');\r\n        this.passwordElement = $('#password');\r\n        this.cpBtn = $('#cp-btn');\r\n        this.setupTip = $('#setup-tip');\r\n\r\n        this.loginElement.submit(this.onLoginRegister.bind(this));\r\n        this.provisionElement.submit(this.onSetup.bind(this));\r\n\r\n        this.userId = utils.findCookie('pnAdminId');\r\n        let tokenCookie = utils.findCookie('pnAdminToken');\r\n\r\n        this.client = new Client({\r\n            session: tokenCookie,\r\n            debug: false,\r\n            endpoint: 'https://admin.pubnub.com'\r\n        });\r\n\r\n        if (this.userId && tokenCookie) {\r\n            this.provisionElement.show();\r\n            this.loginElement.hide();\r\n\r\n            // analytics.identify(this.userId);\r\n            this.identify(this.userId);\r\n            this.setupTip.text(\"Please click the Setup button below to get your account configured for ChatEngine.\");\r\n            if(window.location.hash == 'setup'){\r\n             this.provisionElement.attr('tabindex', 1).focus().blur();\r\n            }\r\n        }else{\r\n            this.setupTip.text(\"Please click the button below to login if you have an account or register for a new one.\");\r\n        }\r\n\r\n    }\r\n\r\n    displayStatus(statusText) {\r\n        this.statusElement.show();\r\n        this.statusElement.append($('<li class=\"list-group-item\">' + statusText + '</li>'));\r\n    }\r\n\r\n    clearErrors() {\r\n        this.errorElement.hide();\r\n    }\r\n\r\n    raiseError(err) {\r\n        this.errorOutElement.html(err);\r\n        this.errorElement.show();\r\n    }\r\n\r\n    onProvisionSuccess(err, data) {\r\n        if (err) {\r\n            this.loadElement.hide();\r\n            this.provisionElement.show();\r\n\r\n            this.errorOutElement.html(err);\r\n            this.errorElement.show();\r\n        } else {\r\n            this.loadElement.hide();\r\n\r\n            let output = '';\r\n            output += 'ChatEngine = ChatEngineCore.create({\\n';\r\n            output += \"    publishKey: '\" + data.pub + \"',\\n\";\r\n            output += \"    subscribeKey: '\" + data.sub + \"'\\n\";\r\n            output += '});\\n';\r\n\r\n            // analytics.track('chat_engine_activation');\r\n            this.track('chat_engine_activation');\r\n\r\n            this.codeElement.text(output);\r\n            this.outputElement.show();\r\n            this.cpBtn.attr('data-clipboard-text',output);\r\n        }\r\n    }\r\n\r\n    onLoginRegister() {\r\n        this.clearErrors();\r\n        const email = this.emailElement.val();\r\n        const password = this.passwordElement.val();\r\n\r\n        if (!email || email === '') {\r\n            this.raiseError('email not valid');\r\n            return false;\r\n        }\r\n\r\n        if (!password || password === '') {\r\n            this.raiseError('password not valid');\r\n            return false;\r\n        }\r\n\r\n        this.client.init({ email, password }, (err, response) => {\r\n            if (err) {\r\n                this.raiseError(extractError(err));\r\n            } else {\r\n                this.userId = response.result.user_id;\r\n\r\n                // analytics.identify(this.userId);\r\n                this.identify(this.userId);\r\n\r\n                this.provisionElement.show();\r\n                this.loginElement.hide();\r\n            }\r\n        });\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    onSetup() {\r\n        this.clearErrors();\r\n\r\n        this.loadElement.show();\r\n        this.errorElement.hide();\r\n        this.statusElement.empty();\r\n\r\n        ProvisionAccount(this.client, this.userId, this.onProvisionSuccess.bind(this), this.displayStatus.bind(this));\r\n\r\n        return false;\r\n    }\r\n\r\n    identify(id) {\r\n        const analyticsData = {\r\n            type: 'identify',\r\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\r\n            context: {\r\n                library: {\r\n                    name: 'PubNub Functions',\r\n                    version: '0.0.1'\r\n                },\r\n                page: {\r\n                    path: location.pathname,\r\n                    url: location.href,\r\n                    title: document.title,\r\n                    search: location.search,\r\n                    referrer: document.referrer\r\n                },\r\n                userAgent: navigator.userAgent\r\n            },\r\n            userId: id\r\n        };\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\r\n            data: JSON.stringify(analyticsData),\r\n            contentType: 'application/json; charset=utf-8'\r\n        });\r\n    }\r\n\r\n    track(event) {\r\n        const analyticsData = {\r\n            type: 'track',\r\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\r\n            event: event,\r\n            context: {\r\n                library: {\r\n                    name: 'PubNub Functions',\r\n                    version: '0.0.1'\r\n                },\r\n                page: {\r\n                    path: location.pathname,\r\n                    url: location.href,\r\n                    title: document.title,\r\n                    search: location.search,\r\n                    referrer: document.referrer\r\n                },\r\n                userAgent: navigator.userAgent\r\n            },\r\n            userId: this.userId\r\n        };\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\r\n            data: JSON.stringify(analyticsData),\r\n            contentType: 'application/json; charset=utf-8'\r\n        });\r\n    }\r\n\r\n};"},{"id":5,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\webpack\\buildin\\global.js","name":"(webpack)/buildin/global.js","index":4,"index2":1,"size":488,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":2,"building":2},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"global","loc":"1:0-44"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3,"source":"var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"},{"id":6,"identifier":"ignored C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist vertx","name":"vertx (ignored)","index":5,"index2":2,"size":15,"cacheable":true,"built":false,"optional":true,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":0,"building":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"vertx","loc":"138:16-26"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3},{"id":7,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\client.js","name":"./setup/src/client.js","index":6,"index2":5,"size":3026,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":4,"building":3},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./client","loc":"4:15-34"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"module.exports = class {\r\n\r\n    constructor(options) {\r\n        options = options || {};\r\n\r\n        this.endpoint = options.endpoint || 'https://admin.pubnub.com';\r\n        this.session = options.session || false;\r\n        this.debug = options.debug || false;\r\n    }\r\n\r\n    errHandle(text) {\r\n        if (this.debug) {\r\n            console.error('API Error: ' + text);\r\n        }\r\n    }\r\n\r\n    clog(input) {\r\n        if (this.debug) {\r\n            if (typeof (input) === 'object') {\r\n                console.log(input);\r\n            } else {\r\n                console.log('API:'.yellow, input);\r\n            }\r\n        }\r\n    }\r\n\r\n    request(method, url, opts, holla) {\r\n\r\n        if (url[1] !== 'me' && !this.session) {\r\n            return this.errHandle('Authorize with init() first.');\r\n        }\r\n\r\n        opts = opts || {};\r\n\r\n        opts.url = this.endpoint + '/' + url.join('/');\r\n        opts.method = method;\r\n\r\n        opts.json = true;\r\n        opts.headers = opts.headers || {};\r\n        // opts.headers.Authorization =\r\n        //     'Basic cHVibnViLWJldGE6YmxvY2tzMjAxNg===';\r\n\r\n        if (this.session) {\r\n            opts.headers['X-Session-Token'] = this.session;\r\n        }\r\n\r\n        // clog('-- URL:'.yellow);\r\n        this.clog(opts.method.red + ' ' + opts.url);\r\n        this.clog('-- opts:'.yellow);\r\n        this.clog(opts);\r\n\r\n        $.ajax(opts)\r\n            .done((data) => {\r\n                console.log(data);\r\n                holla(null, data);\r\n            })\r\n            .fail((data) => {\r\n                console.log('fail', data);\r\n                holla(data || data.message || data);\r\n            });\r\n    }\r\n\r\n    init(input, holla) {\r\n        this.request('post', ['api', 'me'], {\r\n            data: {\r\n                email: input.email || this.errHandle('No Email Supplied'),\r\n                password: input.password || this.errHandle('No Password Supplied')\r\n            }\r\n        }, (err, body) => {\r\n            if (body && body.error) {\r\n                holla(body.error);\r\n            } else if (err) {\r\n                holla(err);\r\n            } else {\r\n                this.session = body.result.token;\r\n                holla(null, body);\r\n            }\r\n        });\r\n    }\r\n\r\n    /* shortcuts to avoid pollution of executors */\r\n    startFunction({ block, key }, callback) {\r\n        this.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block', block.id, 'start'], {\r\n            data: {\r\n                block_id: block.id,\r\n                key_id: key.id,\r\n                action: 'start'\r\n            }\r\n        }, callback);\r\n    }\r\n\r\n    storeSecretKey({ key }, callback) {\r\n        this.request('put', ['api', 'vault', key.subscribe_key, 'key', 'secretKey'], {\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                keyName: 'secretKey',\r\n                key_id: key.id,\r\n                subscribeKey: key.subscribe_key,\r\n                value: key.secret_key\r\n            })\r\n        }, callback);\r\n    }\r\n\r\n};\r\n"},{"id":8,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","name":"./setup/src/setup_account.js","index":7,"index2":8,"size":3263,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":4,"building":4,"dependencies":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./setup_account","loc":"5:25-51"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"const ProvisionBlocks = require('./setup_blocks.js');\r\nconst utils = require('./utils');\r\n\r\nmodule.exports = (api, userId, callback = () => {}, status = () => {}) => {\r\n    api.request('get', ['api', 'accounts'], {\r\n        data: {\r\n            user_id: userId\r\n        }\r\n    }, (err, response) => {\r\n\r\n        if (err) {\r\n            const defaultMessage = 'Could not get PubNub accounts. Please contact support@pubnub.com.';\r\n            return utils.callbackWithError(err, defaultMessage, callback);\r\n        }\r\n\r\n        let account = response.result.accounts[0];\r\n\r\n        status('Using account ' + account.properties.company + ', if this is incorrect, deploy manually or log in as another user');\r\n        status('Creating new PubNub app...');\r\n\r\n        api.request('post', ['api', 'apps'], {\r\n            data: {\r\n                name: 'ChatEngine App',\r\n                owner_id: account.id,\r\n                properties: {}\r\n            }\r\n        }, (err, response) => {\r\n            if (err) {\r\n                const defaultMessage = 'Could not create new PubNub app. Please contact support@pubnub.com.';\r\n                return utils.callbackWithError(err, defaultMessage, callback);\r\n            }\r\n\r\n            let app = response.result;\r\n\r\n            status('Getting PubNub keys...');\r\n\r\n            api.request('get', ['api', 'apps'], {\r\n                data: {\r\n                    owner_id: account.id\r\n                }\r\n            }, (err, response) => {\r\n                if (err) {\r\n                    const defaultMessage = 'Could not get PubNub keys. Please contact support@pubnub.com.';\r\n                    return utils.callbackWithError(err, defaultMessage, callback);\r\n                }\r\n\r\n                let apps = response.result;\r\n                let key;\r\n\r\n                apps.forEach((item) => {\r\n                    if (item.id === app.id) {\r\n                        key = item.keys[0];\r\n                    }\r\n                });\r\n\r\n                status('Enabling PubNub features...');\r\n\r\n                key.properties.name = 'ChatEngine Keyset';\r\n                key.properties.presence = 1;\r\n                key.properties.history = 1;\r\n                key.properties.message_storage_ttl = 7;\r\n                key.properties.multiplexing = 1;\r\n                key.properties.presence_announce_max = 20;\r\n                key.properties.presence_debounce = 2;\r\n                key.properties.presence_global_here_now = 1;\r\n                key.properties.presence_interval = 10;\r\n                key.properties.presence_leave_on_disconnect = 0;\r\n                key.properties.blocks = 1;\r\n                key.properties.uls = 1;\r\n                key.properties.wildcardsubscribe = 1;\r\n\r\n                api.request('put', ['api', 'keys', key.id], {\r\n                    data: key\r\n                }, (err) => {\r\n                    if (err) {\r\n                        const defaultMessage = 'Could not enable PubNub features. Please contact support@pubnub.com.';\r\n                        return utils.callbackWithError(err, defaultMessage, callback);\r\n                    }\r\n\r\n                    ProvisionBlocks(api, userId, key, callback, status);\r\n\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n"},{"id":9,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_blocks.js","name":"./setup/src/setup_blocks.js","index":8,"index2":7,"size":4582,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","issuerId":8,"issuerName":"./setup/src/setup_account.js","profile":{"factory":2,"building":2,"dependencies":0},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":8,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./setup_blocks.js","loc":"1:24-52"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":2,"source":"const utils = require('./utils');\r\n\r\nmodule.exports = (api, userId, key, callback = () => {}, status = () => {}) => {\r\n\r\n    let block = null;\r\n\r\n    status('Creating new PubNub Function...');\r\n\r\n    let startPubNubFunction = () => {\r\n        status('Starting Pubnub Function...');\r\n\r\n        api.startFunction({ block, key }, (err) => {\r\n            if (err) {\r\n                const defaultMessage = 'Could not start PubNub Function. Please contact support@pubnub.com.';\r\n                return utils.callbackWithError(err, defaultMessage, callback);\r\n            }\r\n\r\n            status('Success!');\r\n\r\n            callback(null, {\r\n                pub: key.publish_key,\r\n                sub: key.subscribe_key\r\n            });\r\n\r\n        });\r\n    };\r\n\r\n    let onCodeFetch = (stateCodeResult, authCodeResult, functionCodeResult) => {\r\n        status('Creating new after-publish Event Handler...');\r\n\r\n        api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\r\n            data: {\r\n                key_id: key.id,\r\n                block_id: block.id,\r\n                type: 'js',\r\n                event: 'js-after-presence',\r\n                channels: '*',\r\n                name: 'chat-engine-state',\r\n                code: stateCodeResult[0],\r\n                output: 'output-state-to-kv-' + (new Date()).getTime()\r\n            }\r\n        }, (err, response) => {\r\n            if (err) {\r\n                const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\r\n                return utils.callbackWithError(err, defaultMessage, callback);\r\n            }\r\n\r\n            api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\r\n                data: {\r\n                    key_id: key.id,\r\n                    block_id: block.id,\r\n                    type: 'js',\r\n                    event: 'js-on-rest',\r\n                    path: 'chat-engine-auth',\r\n                    name: 'chat-engine-auth',\r\n                    code: authCodeResult[0],\r\n                    output: 'auth-' + Math.round((new Date()).getTime())\r\n                }\r\n            }, (err, response) => {\r\n                if (err) {\r\n                    const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\r\n                    return utils.callbackWithError(err, defaultMessage, callback);\r\n                }\r\n\r\n                status('Creating new on-request Event Handler...');\r\n\r\n                functionCodeResult[0] = functionCodeResult[0].replace('SECRET_KEY', key.secret_key);\r\n\r\n                api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\r\n                    data: {\r\n                        key_id: key.id,\r\n                        block_id: block.id,\r\n                        code: functionCodeResult[0],\r\n                        type: 'js',\r\n                        name: 'chat-engine-server',\r\n                        path: 'chat-engine-server',\r\n                        event: 'js-on-rest',\r\n                        output: 'output-server-endpoint-' + Math.round((new Date()).getTime())\r\n                    }\r\n                }, (err, response) => {\r\n                    if (err) {\r\n                        const defaultMessage = 'Could not create new Pubnub on-request Event Handler. Please contact support@pubnub.com.';\r\n                        return utils.callbackWithError(err, defaultMessage, callback);\r\n                    }\r\n\r\n                    startPubNubFunction();\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block'], {\r\n        data: {\r\n            name: 'ChatEngine Function',\r\n            key_id: key.id\r\n        }\r\n    }, (err, response) => {\r\n\r\n        if (err) {\r\n            const defaultMessage = 'Could not create new PubNub Function. Please contact support@pubnub.com.';\r\n            return utils.callbackWithError(err, defaultMessage, callback);\r\n        }\r\n\r\n        block = response.payload;\r\n\r\n        let stateCodeFetch = $.get({ url: 'functions/state-to-kv.js', dataType: 'text' });\r\n        let authCodeFetch = $.get({ url: 'functions/auth.js', dataType: 'text' });\r\n        let functionsCodeFetch = $.get({ url: 'functions/server.js', dataType: 'text' });\r\n\r\n        $.when(stateCodeFetch, authCodeFetch, functionsCodeFetch)\r\n            .then(onCodeFetch)\r\n            .catch(() => {\r\n                status('Failed to fetch code');\r\n            });\r\n    });\r\n};\r\n"}],"filteredModules":3,"origins":[{"moduleId":1,"module":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","moduleName":"./setup/src/script.js","loc":"","name":"main","reasons":[]}]}],"modules":[{"id":0,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\utils.js","name":"./setup/src/utils.js","index":9,"index2":6,"size":668,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":4,"building":5},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./utils","loc":"6:14-32"},{"moduleId":8,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./utils","loc":"2:14-32"},{"moduleId":9,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_blocks.js","module":"./setup/src/setup_blocks.js","moduleName":"./setup/src/setup_blocks.js","type":"cjs require","userRequest":"./utils","loc":"1:14-32"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"\r\nconst findCookie = (name) => {\r\n    let cookies = document.cookie.split(';');\r\n    let result = null;\r\n\r\n    cookies.forEach((cookie) => {\r\n        let cookieName = cookie.split('=')[0];\r\n        let cookieValue = cookie.split('=')[1];\r\n\r\n        if (cookieName.endsWith(name)) {\r\n            result = cookieValue;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\nconst callbackWithError = (err, defaultMessage, callback) => {\r\n    if (err && err.responseJSON && err.responseJSON.message) {\r\n        return callback(err.responseJSON.message);\r\n    } else {\r\n        return callback(defaultMessage);\r\n    }\r\n};\r\n\r\nmodule.exports = { findCookie, callbackWithError };\r\n"},{"id":1,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","name":"./setup/src/script.js","index":0,"index2":9,"size":6411,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"issuerId":null,"issuerName":null,"profile":{"factory":5,"building":2},"failed":false,"errors":0,"warnings":0,"reasons":[],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":0,"source":"// polyfill Promise\r\nrequire('es6-promise/auto');\r\n\r\nconst Client = require('./client');\r\nconst ProvisionAccount = require('./setup_account');\r\nconst utils = require('./utils');\r\n\r\n\r\nconst extractError = (err) => {\r\n    if (err && err.responseJSON && err.responseJSON.error) {\r\n        return err.responseJSON.error;\r\n    }\r\n};\r\n\r\nmodule.exports = class {\r\n\r\n    constructor() {\r\n        this.loginElement = $('#login');\r\n        this.provisionElement = $('#setup');\r\n        this.loadElement = $('#load');\r\n        this.errorElement = $('#error');\r\n        this.errorOutElement = $('#error-out');\r\n        this.statusElement = $('#status');\r\n        this.codeElement = $('#code');\r\n        this.outputElement = $('#output');\r\n        this.emailElement = $('#email');\r\n        this.passwordElement = $('#password');\r\n        this.cpBtn = $('#cp-btn');\r\n        this.setupTip = $('#setup-tip');\r\n\r\n        this.loginElement.submit(this.onLoginRegister.bind(this));\r\n        this.provisionElement.submit(this.onSetup.bind(this));\r\n\r\n        this.userId = utils.findCookie('pnAdminId');\r\n        let tokenCookie = utils.findCookie('pnAdminToken');\r\n\r\n        this.client = new Client({\r\n            session: tokenCookie,\r\n            debug: false,\r\n            endpoint: 'https://admin.pubnub.com'\r\n        });\r\n\r\n        if (this.userId && tokenCookie) {\r\n            this.provisionElement.show();\r\n            this.loginElement.hide();\r\n\r\n            // analytics.identify(this.userId);\r\n            this.identify(this.userId);\r\n            this.setupTip.text(\"Please click the Setup button below to get your account configured for ChatEngine.\");\r\n            if(window.location.hash == 'setup'){\r\n             this.provisionElement.attr('tabindex', 1).focus().blur();\r\n            }\r\n        }else{\r\n            this.setupTip.text(\"Please click the button below to login if you have an account or register for a new one.\");\r\n        }\r\n\r\n    }\r\n\r\n    displayStatus(statusText) {\r\n        this.statusElement.show();\r\n        this.statusElement.append($('<li class=\"list-group-item\">' + statusText + '</li>'));\r\n    }\r\n\r\n    clearErrors() {\r\n        this.errorElement.hide();\r\n    }\r\n\r\n    raiseError(err) {\r\n        this.errorOutElement.html(err);\r\n        this.errorElement.show();\r\n    }\r\n\r\n    onProvisionSuccess(err, data) {\r\n        if (err) {\r\n            this.loadElement.hide();\r\n            this.provisionElement.show();\r\n\r\n            this.errorOutElement.html(err);\r\n            this.errorElement.show();\r\n        } else {\r\n            this.loadElement.hide();\r\n\r\n            let output = '';\r\n            output += 'ChatEngine = ChatEngineCore.create({\\n';\r\n            output += \"    publishKey: '\" + data.pub + \"',\\n\";\r\n            output += \"    subscribeKey: '\" + data.sub + \"'\\n\";\r\n            output += '});\\n';\r\n\r\n            // analytics.track('chat_engine_activation');\r\n            this.track('chat_engine_activation');\r\n\r\n            this.codeElement.text(output);\r\n            this.outputElement.show();\r\n            this.cpBtn.attr('data-clipboard-text',output);\r\n        }\r\n    }\r\n\r\n    onLoginRegister() {\r\n        this.clearErrors();\r\n        const email = this.emailElement.val();\r\n        const password = this.passwordElement.val();\r\n\r\n        if (!email || email === '') {\r\n            this.raiseError('email not valid');\r\n            return false;\r\n        }\r\n\r\n        if (!password || password === '') {\r\n            this.raiseError('password not valid');\r\n            return false;\r\n        }\r\n\r\n        this.client.init({ email, password }, (err, response) => {\r\n            if (err) {\r\n                this.raiseError(extractError(err));\r\n            } else {\r\n                this.userId = response.result.user_id;\r\n\r\n                // analytics.identify(this.userId);\r\n                this.identify(this.userId);\r\n\r\n                this.provisionElement.show();\r\n                this.loginElement.hide();\r\n            }\r\n        });\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    onSetup() {\r\n        this.clearErrors();\r\n\r\n        this.loadElement.show();\r\n        this.errorElement.hide();\r\n        this.statusElement.empty();\r\n\r\n        ProvisionAccount(this.client, this.userId, this.onProvisionSuccess.bind(this), this.displayStatus.bind(this));\r\n\r\n        return false;\r\n    }\r\n\r\n    identify(id) {\r\n        const analyticsData = {\r\n            type: 'identify',\r\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\r\n            context: {\r\n                library: {\r\n                    name: 'PubNub Functions',\r\n                    version: '0.0.1'\r\n                },\r\n                page: {\r\n                    path: location.pathname,\r\n                    url: location.href,\r\n                    title: document.title,\r\n                    search: location.search,\r\n                    referrer: document.referrer\r\n                },\r\n                userAgent: navigator.userAgent\r\n            },\r\n            userId: id\r\n        };\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\r\n            data: JSON.stringify(analyticsData),\r\n            contentType: 'application/json; charset=utf-8'\r\n        });\r\n    }\r\n\r\n    track(event) {\r\n        const analyticsData = {\r\n            type: 'track',\r\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\r\n            event: event,\r\n            context: {\r\n                library: {\r\n                    name: 'PubNub Functions',\r\n                    version: '0.0.1'\r\n                },\r\n                page: {\r\n                    path: location.pathname,\r\n                    url: location.href,\r\n                    title: document.title,\r\n                    search: location.search,\r\n                    referrer: document.referrer\r\n                },\r\n                userAgent: navigator.userAgent\r\n            },\r\n            userId: this.userId\r\n        };\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\r\n            data: JSON.stringify(analyticsData),\r\n            contentType: 'application/json; charset=utf-8'\r\n        });\r\n    }\r\n\r\n};"},{"id":5,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\webpack\\buildin\\global.js","name":"(webpack)/buildin/global.js","index":4,"index2":1,"size":488,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":2,"building":2},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"global","loc":"1:0-44"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3,"source":"var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"},{"id":6,"identifier":"ignored C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist vertx","name":"vertx (ignored)","index":5,"index2":2,"size":15,"cacheable":true,"built":false,"optional":true,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":0,"building":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\node_modules\\es6-promise\\dist\\es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"vertx","loc":"138:16-26"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3},{"id":7,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\client.js","name":"./setup/src/client.js","index":6,"index2":5,"size":3026,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":4,"building":3},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./client","loc":"4:15-34"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"module.exports = class {\r\n\r\n    constructor(options) {\r\n        options = options || {};\r\n\r\n        this.endpoint = options.endpoint || 'https://admin.pubnub.com';\r\n        this.session = options.session || false;\r\n        this.debug = options.debug || false;\r\n    }\r\n\r\n    errHandle(text) {\r\n        if (this.debug) {\r\n            console.error('API Error: ' + text);\r\n        }\r\n    }\r\n\r\n    clog(input) {\r\n        if (this.debug) {\r\n            if (typeof (input) === 'object') {\r\n                console.log(input);\r\n            } else {\r\n                console.log('API:'.yellow, input);\r\n            }\r\n        }\r\n    }\r\n\r\n    request(method, url, opts, holla) {\r\n\r\n        if (url[1] !== 'me' && !this.session) {\r\n            return this.errHandle('Authorize with init() first.');\r\n        }\r\n\r\n        opts = opts || {};\r\n\r\n        opts.url = this.endpoint + '/' + url.join('/');\r\n        opts.method = method;\r\n\r\n        opts.json = true;\r\n        opts.headers = opts.headers || {};\r\n        // opts.headers.Authorization =\r\n        //     'Basic cHVibnViLWJldGE6YmxvY2tzMjAxNg===';\r\n\r\n        if (this.session) {\r\n            opts.headers['X-Session-Token'] = this.session;\r\n        }\r\n\r\n        // clog('-- URL:'.yellow);\r\n        this.clog(opts.method.red + ' ' + opts.url);\r\n        this.clog('-- opts:'.yellow);\r\n        this.clog(opts);\r\n\r\n        $.ajax(opts)\r\n            .done((data) => {\r\n                console.log(data);\r\n                holla(null, data);\r\n            })\r\n            .fail((data) => {\r\n                console.log('fail', data);\r\n                holla(data || data.message || data);\r\n            });\r\n    }\r\n\r\n    init(input, holla) {\r\n        this.request('post', ['api', 'me'], {\r\n            data: {\r\n                email: input.email || this.errHandle('No Email Supplied'),\r\n                password: input.password || this.errHandle('No Password Supplied')\r\n            }\r\n        }, (err, body) => {\r\n            if (body && body.error) {\r\n                holla(body.error);\r\n            } else if (err) {\r\n                holla(err);\r\n            } else {\r\n                this.session = body.result.token;\r\n                holla(null, body);\r\n            }\r\n        });\r\n    }\r\n\r\n    /* shortcuts to avoid pollution of executors */\r\n    startFunction({ block, key }, callback) {\r\n        this.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block', block.id, 'start'], {\r\n            data: {\r\n                block_id: block.id,\r\n                key_id: key.id,\r\n                action: 'start'\r\n            }\r\n        }, callback);\r\n    }\r\n\r\n    storeSecretKey({ key }, callback) {\r\n        this.request('put', ['api', 'vault', key.subscribe_key, 'key', 'secretKey'], {\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                keyName: 'secretKey',\r\n                key_id: key.id,\r\n                subscribeKey: key.subscribe_key,\r\n                value: key.secret_key\r\n            })\r\n        }, callback);\r\n    }\r\n\r\n};\r\n"},{"id":8,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","name":"./setup/src/setup_account.js","index":7,"index2":8,"size":3263,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":4,"building":4,"dependencies":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./setup_account","loc":"5:25-51"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"const ProvisionBlocks = require('./setup_blocks.js');\r\nconst utils = require('./utils');\r\n\r\nmodule.exports = (api, userId, callback = () => {}, status = () => {}) => {\r\n    api.request('get', ['api', 'accounts'], {\r\n        data: {\r\n            user_id: userId\r\n        }\r\n    }, (err, response) => {\r\n\r\n        if (err) {\r\n            const defaultMessage = 'Could not get PubNub accounts. Please contact support@pubnub.com.';\r\n            return utils.callbackWithError(err, defaultMessage, callback);\r\n        }\r\n\r\n        let account = response.result.accounts[0];\r\n\r\n        status('Using account ' + account.properties.company + ', if this is incorrect, deploy manually or log in as another user');\r\n        status('Creating new PubNub app...');\r\n\r\n        api.request('post', ['api', 'apps'], {\r\n            data: {\r\n                name: 'ChatEngine App',\r\n                owner_id: account.id,\r\n                properties: {}\r\n            }\r\n        }, (err, response) => {\r\n            if (err) {\r\n                const defaultMessage = 'Could not create new PubNub app. Please contact support@pubnub.com.';\r\n                return utils.callbackWithError(err, defaultMessage, callback);\r\n            }\r\n\r\n            let app = response.result;\r\n\r\n            status('Getting PubNub keys...');\r\n\r\n            api.request('get', ['api', 'apps'], {\r\n                data: {\r\n                    owner_id: account.id\r\n                }\r\n            }, (err, response) => {\r\n                if (err) {\r\n                    const defaultMessage = 'Could not get PubNub keys. Please contact support@pubnub.com.';\r\n                    return utils.callbackWithError(err, defaultMessage, callback);\r\n                }\r\n\r\n                let apps = response.result;\r\n                let key;\r\n\r\n                apps.forEach((item) => {\r\n                    if (item.id === app.id) {\r\n                        key = item.keys[0];\r\n                    }\r\n                });\r\n\r\n                status('Enabling PubNub features...');\r\n\r\n                key.properties.name = 'ChatEngine Keyset';\r\n                key.properties.presence = 1;\r\n                key.properties.history = 1;\r\n                key.properties.message_storage_ttl = 7;\r\n                key.properties.multiplexing = 1;\r\n                key.properties.presence_announce_max = 20;\r\n                key.properties.presence_debounce = 2;\r\n                key.properties.presence_global_here_now = 1;\r\n                key.properties.presence_interval = 10;\r\n                key.properties.presence_leave_on_disconnect = 0;\r\n                key.properties.blocks = 1;\r\n                key.properties.uls = 1;\r\n                key.properties.wildcardsubscribe = 1;\r\n\r\n                api.request('put', ['api', 'keys', key.id], {\r\n                    data: key\r\n                }, (err) => {\r\n                    if (err) {\r\n                        const defaultMessage = 'Could not enable PubNub features. Please contact support@pubnub.com.';\r\n                        return utils.callbackWithError(err, defaultMessage, callback);\r\n                    }\r\n\r\n                    ProvisionBlocks(api, userId, key, callback, status);\r\n\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n"},{"id":9,"identifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_blocks.js","name":"./setup/src/setup_blocks.js","index":8,"index2":7,"size":4582,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","issuerId":8,"issuerName":"./setup/src/setup_account.js","profile":{"factory":2,"building":2,"dependencies":0},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":8,"moduleIdentifier":"C:\\Users\\alyyas\\Documents\\GitHub\\chat-engine\\setup\\src\\setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./setup_blocks.js","loc":"1:24-52"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":2,"source":"const utils = require('./utils');\r\n\r\nmodule.exports = (api, userId, key, callback = () => {}, status = () => {}) => {\r\n\r\n    let block = null;\r\n\r\n    status('Creating new PubNub Function...');\r\n\r\n    let startPubNubFunction = () => {\r\n        status('Starting Pubnub Function...');\r\n\r\n        api.startFunction({ block, key }, (err) => {\r\n            if (err) {\r\n                const defaultMessage = 'Could not start PubNub Function. Please contact support@pubnub.com.';\r\n                return utils.callbackWithError(err, defaultMessage, callback);\r\n            }\r\n\r\n            status('Success!');\r\n\r\n            callback(null, {\r\n                pub: key.publish_key,\r\n                sub: key.subscribe_key\r\n            });\r\n\r\n        });\r\n    };\r\n\r\n    let onCodeFetch = (stateCodeResult, authCodeResult, functionCodeResult) => {\r\n        status('Creating new after-publish Event Handler...');\r\n\r\n        api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\r\n            data: {\r\n                key_id: key.id,\r\n                block_id: block.id,\r\n                type: 'js',\r\n                event: 'js-after-presence',\r\n                channels: '*',\r\n                name: 'chat-engine-state',\r\n                code: stateCodeResult[0],\r\n                output: 'output-state-to-kv-' + (new Date()).getTime()\r\n            }\r\n        }, (err, response) => {\r\n            if (err) {\r\n                const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\r\n                return utils.callbackWithError(err, defaultMessage, callback);\r\n            }\r\n\r\n            api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\r\n                data: {\r\n                    key_id: key.id,\r\n                    block_id: block.id,\r\n                    type: 'js',\r\n                    event: 'js-on-rest',\r\n                    path: 'chat-engine-auth',\r\n                    name: 'chat-engine-auth',\r\n                    code: authCodeResult[0],\r\n                    output: 'auth-' + Math.round((new Date()).getTime())\r\n                }\r\n            }, (err, response) => {\r\n                if (err) {\r\n                    const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\r\n                    return utils.callbackWithError(err, defaultMessage, callback);\r\n                }\r\n\r\n                status('Creating new on-request Event Handler...');\r\n\r\n                functionCodeResult[0] = functionCodeResult[0].replace('SECRET_KEY', key.secret_key);\r\n\r\n                api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\r\n                    data: {\r\n                        key_id: key.id,\r\n                        block_id: block.id,\r\n                        code: functionCodeResult[0],\r\n                        type: 'js',\r\n                        name: 'chat-engine-server',\r\n                        path: 'chat-engine-server',\r\n                        event: 'js-on-rest',\r\n                        output: 'output-server-endpoint-' + Math.round((new Date()).getTime())\r\n                    }\r\n                }, (err, response) => {\r\n                    if (err) {\r\n                        const defaultMessage = 'Could not create new Pubnub on-request Event Handler. Please contact support@pubnub.com.';\r\n                        return utils.callbackWithError(err, defaultMessage, callback);\r\n                    }\r\n\r\n                    startPubNubFunction();\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block'], {\r\n        data: {\r\n            name: 'ChatEngine Function',\r\n            key_id: key.id\r\n        }\r\n    }, (err, response) => {\r\n\r\n        if (err) {\r\n            const defaultMessage = 'Could not create new PubNub Function. Please contact support@pubnub.com.';\r\n            return utils.callbackWithError(err, defaultMessage, callback);\r\n        }\r\n\r\n        block = response.payload;\r\n\r\n        let stateCodeFetch = $.get({ url: 'functions/state-to-kv.js', dataType: 'text' });\r\n        let authCodeFetch = $.get({ url: 'functions/auth.js', dataType: 'text' });\r\n        let functionsCodeFetch = $.get({ url: 'functions/server.js', dataType: 'text' });\r\n\r\n        $.when(stateCodeFetch, authCodeFetch, functionsCodeFetch)\r\n            .then(onCodeFetch)\r\n            .catch(() => {\r\n                status('Failed to fetch code');\r\n            });\r\n    });\r\n};\r\n"}],"filteredModules":3,"children":[]}
