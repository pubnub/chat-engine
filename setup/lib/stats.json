{"errors":[],"warnings":[],"version":"3.8.1","hash":"19e4c6a1598499dd525d","publicPath":"","assetsByChunkName":{"main":"chat-engine-setup.js"},"assets":[{"name":"chat-engine-setup.js","size":17306,"chunks":[0],"chunkNames":["main"],"emitted":true},{"name":"stats.json","size":0,"chunks":[],"chunkNames":[]}],"filteredAssets":0,"entrypoints":{"main":{"chunks":[0],"assets":["chat-engine-setup.js"]}},"chunks":[{"id":0,"rendered":true,"initial":true,"entry":true,"extraAsync":false,"size":51623,"names":["main"],"files":["chat-engine-setup.js"],"hash":"d9efd1e76f158a3a0dfc","parents":[],"modules":[{"id":0,"identifier":"/Users/ian/Development/chat-engine/setup/src/utils.js","name":"./setup/src/utils.js","index":9,"index2":6,"size":642,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":6,"building":9},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./utils","loc":"6:14-32"},{"moduleId":8,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./utils","loc":"2:14-32"},{"moduleId":9,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/setup_blocks.js","module":"./setup/src/setup_blocks.js","moduleName":"./setup/src/setup_blocks.js","type":"cjs require","userRequest":"./utils","loc":"1:14-32"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"\nconst findCookie = (name) => {\n    let cookies = document.cookie.split(';');\n    let result = null;\n\n    cookies.forEach((cookie) => {\n        let cookieName = cookie.split('=')[0];\n        let cookieValue = cookie.split('=')[1];\n\n        if (cookieName.endsWith(name)) {\n            result = cookieValue;\n        }\n    });\n\n    return result;\n};\n\nconst callbackWithError = (err, defaultMessage, callback) => {\n    if (err && err.responseJSON && err.responseJSON.message) {\n        return callback(err.responseJSON.message);\n    } else {\n        return callback(defaultMessage);\n    }\n};\n\nmodule.exports = { findCookie, callbackWithError };\n"},{"id":1,"identifier":"/Users/ian/Development/chat-engine/setup/src/script.js","name":"./setup/src/script.js","index":0,"index2":9,"size":5755,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"issuerId":null,"issuerName":null,"profile":{"factory":3,"building":4},"failed":false,"errors":0,"warnings":0,"reasons":[],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":0,"source":"// polyfill Promise\nrequire('es6-promise/auto');\n\nconst Client = require('./client');\nconst ProvisionAccount = require('./setup_account');\nconst utils = require('./utils');\n\n\nconst extractError = (err) => {\n    if (err && err.responseJSON && err.responseJSON.error) {\n        return err.responseJSON.error;\n    }\n};\n\nmodule.exports = class {\n\n    constructor() {\n        this.loginElement = $('#login');\n        this.provisionElement = $('#setup');\n        this.loadElement = $('#load');\n        this.errorElement = $('#error');\n        this.errorOutElement = $('#error-out');\n        this.statusElement = $('#status');\n        this.codeElement = $('#code');\n        this.outputElement = $('#output');\n        this.emailElement = $('#email');\n        this.passwordElement = $('#password');\n\n        this.loginElement.submit(this.onLoginRegister.bind(this));\n        this.provisionElement.submit(this.onSetup.bind(this));\n\n        this.userId = utils.findCookie('pnAdminId');\n        let tokenCookie = utils.findCookie('pnAdminToken');\n\n        this.client = new Client({\n            session: tokenCookie,\n            debug: false,\n            endpoint: 'https://admin.pubnub.com'\n        });\n\n        if (this.userId && tokenCookie) {\n            this.provisionElement.show();\n            this.loginElement.hide();\n\n            // analytics.identify(this.userId);\n            this.identify(this.userId);\n        }\n\n    }\n\n    displayStatus(statusText) {\n        this.statusElement.show();\n        this.statusElement.append($('<li class=\"list-group-item\">' + statusText + '</li>'));\n    }\n\n    clearErrors() {\n        this.errorElement.hide();\n    }\n\n    raiseError(err) {\n        this.errorOutElement.html(err);\n        this.errorElement.show();\n    }\n\n    onProvisionSuccess(err, data) {\n        if (err) {\n            this.loadElement.hide();\n            this.provisionElement.show();\n\n            this.errorOutElement.html(err);\n            this.errorElement.show();\n        } else {\n            this.loadElement.hide();\n\n            let output = '';\n            output += '// Make sure to import ChatEngine first!\\n';\n            output += 'ChatEngine = ChatEngineCore.create({\\n';\n            output += \"    publishKey: '\" + data.pub + \"',\\n\";\n            output += \"    subscribeKey: '\" + data.sub + \"'\\n\";\n            output += '});\\n';\n\n            // analytics.track('chat_engine_activation');\n            this.track('chat_engine_activation');\n\n            this.codeElement.text(output);\n            this.outputElement.show();\n        }\n    }\n\n    onLoginRegister() {\n        this.clearErrors();\n        const email = this.emailElement.val();\n        const password = this.passwordElement.val();\n\n        if (!email || email === '') {\n            this.raiseError('email not valid');\n            return false;\n        }\n\n        if (!password || password === '') {\n            this.raiseError('password not valid');\n            return false;\n        }\n\n        this.client.init({ email, password }, (err, response) => {\n            if (err) {\n                this.raiseError(extractError(err));\n            } else {\n                this.userId = response.result.user_id;\n\n                // analytics.identify(this.userId);\n                this.identify(this.userId);\n\n                this.provisionElement.show();\n                this.loginElement.hide();\n            }\n        });\n\n\n        return false;\n    }\n\n    onSetup() {\n        this.clearErrors();\n\n        this.loadElement.show();\n        this.errorElement.hide();\n        this.statusElement.empty();\n\n        ProvisionAccount(this.client, this.userId, this.onProvisionSuccess.bind(this), this.displayStatus.bind(this));\n\n        return false;\n    }\n\n    identify(id) {\n        const analyticsData = {\n            type: 'identify',\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\n            context: {\n                library: {\n                    name: 'PubNub Functions',\n                    version: '0.0.1'\n                },\n                page: {\n                    path: location.pathname,\n                    url: location.href,\n                    title: document.title,\n                    search: location.search,\n                    referrer: document.referrer\n                },\n                userAgent: navigator.userAgent\n            },\n            userId: id\n        };\n        $.ajax({\n            type: 'POST',\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\n            data: JSON.stringify(analyticsData),\n            contentType: 'application/json; charset=utf-8'\n        });\n    }\n\n    track(event) {\n        const analyticsData = {\n            type: 'track',\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\n            event: event,\n            context: {\n                library: {\n                    name: 'PubNub Functions',\n                    version: '0.0.1'\n                },\n                page: {\n                    path: location.pathname,\n                    url: location.href,\n                    title: document.title,\n                    search: location.search,\n                    referrer: document.referrer\n                },\n                userAgent: navigator.userAgent\n            },\n            userId: this.userId\n        };\n        $.ajax({\n            type: 'POST',\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\n            data: JSON.stringify(analyticsData),\n            contentType: 'application/json; charset=utf-8'\n        });\n    }\n\n};\n"},{"id":5,"identifier":"/Users/ian/Development/chat-engine/node_modules/webpack/buildin/global.js","name":"(webpack)/buildin/global.js","index":4,"index2":1,"size":488,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":2,"building":6},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"global","loc":"1:0-44"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3,"source":"var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"},{"id":6,"identifier":"ignored /Users/ian/Development/chat-engine/node_modules/es6-promise/dist vertx","name":"vertx (ignored)","index":5,"index2":2,"size":15,"cacheable":true,"built":false,"optional":true,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":0,"building":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"vertx","loc":"138:16-26"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3},{"id":7,"identifier":"/Users/ian/Development/chat-engine/setup/src/client.js","name":"./setup/src/client.js","index":6,"index2":5,"size":2922,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":5,"building":8},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./client","loc":"4:15-34"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"module.exports = class {\n\n    constructor(options) {\n        options = options || {};\n\n        this.endpoint = options.endpoint || 'https://admin.pubnub.com';\n        this.session = options.session || false;\n        this.debug = options.debug || false;\n    }\n\n    errHandle(text) {\n        if (this.debug) {\n            console.error('API Error: ' + text);\n        }\n    }\n\n    clog(input) {\n        if (this.debug) {\n            if (typeof (input) === 'object') {\n                console.log(input);\n            } else {\n                console.log('API:'.yellow, input);\n            }\n        }\n    }\n\n    request(method, url, opts, holla) {\n\n        if (url[1] !== 'me' && !this.session) {\n            return this.errHandle('Authorize with init() first.');\n        }\n\n        opts = opts || {};\n\n        opts.url = this.endpoint + '/' + url.join('/');\n        opts.method = method;\n\n        opts.json = true;\n        opts.headers = opts.headers || {};\n        // opts.headers.Authorization =\n        //     'Basic cHVibnViLWJldGE6YmxvY2tzMjAxNg===';\n\n        if (this.session) {\n            opts.headers['X-Session-Token'] = this.session;\n        }\n\n        // clog('-- URL:'.yellow);\n        this.clog(opts.method.red + ' ' + opts.url);\n        this.clog('-- opts:'.yellow);\n        this.clog(opts);\n\n        $.ajax(opts)\n            .done((data) => {\n                console.log(data);\n                holla(null, data);\n            })\n            .fail((data) => {\n                console.log('fail', data);\n                holla(data || data.message || data);\n            });\n    }\n\n    init(input, holla) {\n        this.request('post', ['api', 'me'], {\n            data: {\n                email: input.email || this.errHandle('No Email Supplied'),\n                password: input.password || this.errHandle('No Password Supplied')\n            }\n        }, (err, body) => {\n            if (body && body.error) {\n                holla(body.error);\n            } else if (err) {\n                holla(err);\n            } else {\n                this.session = body.result.token;\n                holla(null, body);\n            }\n        });\n    }\n\n    /* shortcuts to avoid pollution of executors */\n    startFunction({ block, key }, callback) {\n        this.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block', block.id, 'start'], {\n            data: {\n                block_id: block.id,\n                key_id: key.id,\n                action: 'start'\n            }\n        }, callback);\n    }\n\n    storeSecretKey({ key }, callback) {\n        this.request('put', ['api', 'vault', key.subscribe_key, 'key', 'secretKey'], {\n            contentType: 'application/json',\n            data: JSON.stringify({\n                keyName: 'secretKey',\n                key_id: key.id,\n                subscribeKey: key.subscribe_key,\n                value: key.secret_key\n            })\n        }, callback);\n    }\n\n};\n"},{"id":8,"identifier":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","name":"./setup/src/setup_account.js","index":7,"index2":8,"size":3177,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":6,"building":8,"dependencies":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./setup_account","loc":"5:25-51"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"const ProvisionBlocks = require('./setup_blocks.js');\nconst utils = require('./utils');\n\nmodule.exports = (api, userId, callback = () => {}, status = () => {}) => {\n    api.request('get', ['api', 'accounts'], {\n        data: {\n            user_id: userId\n        }\n    }, (err, response) => {\n\n        if (err) {\n            const defaultMessage = 'Could not get PubNub accounts. Please contact support@pubnub.com.';\n            return utils.callbackWithError(err, defaultMessage, callback);\n        }\n\n        let account = response.result.accounts[0];\n\n        status('Using account ' + account.properties.company + ', if this is incorrect, deploy manually or log in as another user');\n        status('Creating new PubNub app...');\n\n        api.request('post', ['api', 'apps'], {\n            data: {\n                name: 'ChatEngine App',\n                owner_id: account.id,\n                properties: {}\n            }\n        }, (err, response) => {\n            if (err) {\n                const defaultMessage = 'Could not create new PubNub app. Please contact support@pubnub.com.';\n                return utils.callbackWithError(err, defaultMessage, callback);\n            }\n\n            let app = response.result;\n\n            status('Getting PubNub keys...');\n\n            api.request('get', ['api', 'apps'], {\n                data: {\n                    owner_id: account.id\n                }\n            }, (err, response) => {\n                if (err) {\n                    const defaultMessage = 'Could not get PubNub keys. Please contact support@pubnub.com.';\n                    return utils.callbackWithError(err, defaultMessage, callback);\n                }\n\n                let apps = response.result;\n                let key;\n\n                apps.forEach((item) => {\n                    if (item.id === app.id) {\n                        key = item.keys[0];\n                    }\n                });\n\n                status('Enabling PubNub features...');\n\n                key.properties.name = 'ChatEngine Keyset';\n                key.properties.presence = 1;\n                key.properties.history = 1;\n                key.properties.message_storage_ttl = 7;\n                key.properties.multiplexing = 1;\n                key.properties.presence_announce_max = 20;\n                key.properties.presence_debounce = 2;\n                key.properties.presence_global_here_now = 1;\n                key.properties.presence_interval = 10;\n                key.properties.presence_leave_on_disconnect = 0;\n                key.properties.blocks = 1;\n                key.properties.uls = 1;\n                key.properties.wildcardsubscribe = 1;\n\n                api.request('put', ['api', 'keys', key.id], {\n                    data: key\n                }, (err) => {\n                    if (err) {\n                        const defaultMessage = 'Could not enable PubNub features. Please contact support@pubnub.com.';\n                        return utils.callbackWithError(err, defaultMessage, callback);\n                    }\n\n                    ProvisionBlocks(api, userId, key, callback, status);\n\n                });\n            });\n        });\n    });\n};\n"},{"id":9,"identifier":"/Users/ian/Development/chat-engine/setup/src/setup_blocks.js","name":"./setup/src/setup_blocks.js","index":8,"index2":7,"size":4466,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","issuerId":8,"issuerName":"./setup/src/setup_account.js","profile":{"factory":2,"building":10,"dependencies":0},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":8,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./setup_blocks.js","loc":"1:24-52"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":2,"source":"const utils = require('./utils');\n\nmodule.exports = (api, userId, key, callback = () => {}, status = () => {}) => {\n\n    let block = null;\n\n    status('Creating new PubNub Function...');\n\n    let startPubNubFunction = () => {\n        status('Starting Pubnub Function...');\n\n        api.startFunction({ block, key }, (err) => {\n            if (err) {\n                const defaultMessage = 'Could not start PubNub Function. Please contact support@pubnub.com.';\n                return utils.callbackWithError(err, defaultMessage, callback);\n            }\n\n            status('Success!');\n\n            callback(null, {\n                pub: key.publish_key,\n                sub: key.subscribe_key\n            });\n\n        });\n    };\n\n    let onCodeFetch = (stateCodeResult, authCodeResult, functionCodeResult) => {\n        status('Creating new after-publish Event Handler...');\n\n        api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\n            data: {\n                key_id: key.id,\n                block_id: block.id,\n                type: 'js',\n                event: 'js-after-presence',\n                channels: '*',\n                name: 'chat-engine-state',\n                code: stateCodeResult[0],\n                output: 'output-state-to-kv-' + (new Date()).getTime()\n            }\n        }, (err, response) => {\n            if (err) {\n                const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\n                return utils.callbackWithError(err, defaultMessage, callback);\n            }\n\n            api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\n                data: {\n                    key_id: key.id,\n                    block_id: block.id,\n                    type: 'js',\n                    event: 'js-on-rest',\n                    path: 'chat-engine-auth',\n                    name: 'chat-engine-auth',\n                    code: authCodeResult[0],\n                    output: 'auth-' + Math.round((new Date()).getTime())\n                }\n            }, (err, response) => {\n                if (err) {\n                    const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\n                    return utils.callbackWithError(err, defaultMessage, callback);\n                }\n\n                status('Creating new on-request Event Handler...');\n\n                functionCodeResult[0] = functionCodeResult[0].replace('SECRET_KEY', key.secret_key);\n\n                api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\n                    data: {\n                        key_id: key.id,\n                        block_id: block.id,\n                        code: functionCodeResult[0],\n                        type: 'js',\n                        name: 'chat-engine-server',\n                        path: 'chat-engine-server',\n                        event: 'js-on-rest',\n                        output: 'output-server-endpoint-' + Math.round((new Date()).getTime())\n                    }\n                }, (err, response) => {\n                    if (err) {\n                        const defaultMessage = 'Could not create new Pubnub on-request Event Handler. Please contact support@pubnub.com.';\n                        return utils.callbackWithError(err, defaultMessage, callback);\n                    }\n\n                    startPubNubFunction();\n                });\n            });\n        });\n    };\n\n    api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block'], {\n        data: {\n            name: 'ChatEngine Function',\n            key_id: key.id\n        }\n    }, (err, response) => {\n\n        if (err) {\n            const defaultMessage = 'Could not create new PubNub Function. Please contact support@pubnub.com.';\n            return utils.callbackWithError(err, defaultMessage, callback);\n        }\n\n        block = response.payload;\n\n        let stateCodeFetch = $.get({ url: 'functions/state-to-kv.js', dataType: 'text' });\n        let authCodeFetch = $.get({ url: 'functions/auth.js', dataType: 'text' });\n        let functionsCodeFetch = $.get({ url: 'functions/server.js', dataType: 'text' });\n\n        $.when(stateCodeFetch, authCodeFetch, functionsCodeFetch)\n            .then(onCodeFetch)\n            .catch(() => {\n                status('Failed to fetch code');\n            });\n    });\n};\n"}],"filteredModules":3,"origins":[{"moduleId":1,"module":"/Users/ian/Development/chat-engine/setup/src/script.js","moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/script.js","moduleName":"./setup/src/script.js","loc":"","name":"main","reasons":[]}]}],"modules":[{"id":0,"identifier":"/Users/ian/Development/chat-engine/setup/src/utils.js","name":"./setup/src/utils.js","index":9,"index2":6,"size":642,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":6,"building":9},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./utils","loc":"6:14-32"},{"moduleId":8,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./utils","loc":"2:14-32"},{"moduleId":9,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/setup_blocks.js","module":"./setup/src/setup_blocks.js","moduleName":"./setup/src/setup_blocks.js","type":"cjs require","userRequest":"./utils","loc":"1:14-32"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"\nconst findCookie = (name) => {\n    let cookies = document.cookie.split(';');\n    let result = null;\n\n    cookies.forEach((cookie) => {\n        let cookieName = cookie.split('=')[0];\n        let cookieValue = cookie.split('=')[1];\n\n        if (cookieName.endsWith(name)) {\n            result = cookieValue;\n        }\n    });\n\n    return result;\n};\n\nconst callbackWithError = (err, defaultMessage, callback) => {\n    if (err && err.responseJSON && err.responseJSON.message) {\n        return callback(err.responseJSON.message);\n    } else {\n        return callback(defaultMessage);\n    }\n};\n\nmodule.exports = { findCookie, callbackWithError };\n"},{"id":1,"identifier":"/Users/ian/Development/chat-engine/setup/src/script.js","name":"./setup/src/script.js","index":0,"index2":9,"size":5755,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"issuerId":null,"issuerName":null,"profile":{"factory":3,"building":4},"failed":false,"errors":0,"warnings":0,"reasons":[],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":0,"source":"// polyfill Promise\nrequire('es6-promise/auto');\n\nconst Client = require('./client');\nconst ProvisionAccount = require('./setup_account');\nconst utils = require('./utils');\n\n\nconst extractError = (err) => {\n    if (err && err.responseJSON && err.responseJSON.error) {\n        return err.responseJSON.error;\n    }\n};\n\nmodule.exports = class {\n\n    constructor() {\n        this.loginElement = $('#login');\n        this.provisionElement = $('#setup');\n        this.loadElement = $('#load');\n        this.errorElement = $('#error');\n        this.errorOutElement = $('#error-out');\n        this.statusElement = $('#status');\n        this.codeElement = $('#code');\n        this.outputElement = $('#output');\n        this.emailElement = $('#email');\n        this.passwordElement = $('#password');\n\n        this.loginElement.submit(this.onLoginRegister.bind(this));\n        this.provisionElement.submit(this.onSetup.bind(this));\n\n        this.userId = utils.findCookie('pnAdminId');\n        let tokenCookie = utils.findCookie('pnAdminToken');\n\n        this.client = new Client({\n            session: tokenCookie,\n            debug: false,\n            endpoint: 'https://admin.pubnub.com'\n        });\n\n        if (this.userId && tokenCookie) {\n            this.provisionElement.show();\n            this.loginElement.hide();\n\n            // analytics.identify(this.userId);\n            this.identify(this.userId);\n        }\n\n    }\n\n    displayStatus(statusText) {\n        this.statusElement.show();\n        this.statusElement.append($('<li class=\"list-group-item\">' + statusText + '</li>'));\n    }\n\n    clearErrors() {\n        this.errorElement.hide();\n    }\n\n    raiseError(err) {\n        this.errorOutElement.html(err);\n        this.errorElement.show();\n    }\n\n    onProvisionSuccess(err, data) {\n        if (err) {\n            this.loadElement.hide();\n            this.provisionElement.show();\n\n            this.errorOutElement.html(err);\n            this.errorElement.show();\n        } else {\n            this.loadElement.hide();\n\n            let output = '';\n            output += '// Make sure to import ChatEngine first!\\n';\n            output += 'ChatEngine = ChatEngineCore.create({\\n';\n            output += \"    publishKey: '\" + data.pub + \"',\\n\";\n            output += \"    subscribeKey: '\" + data.sub + \"'\\n\";\n            output += '});\\n';\n\n            // analytics.track('chat_engine_activation');\n            this.track('chat_engine_activation');\n\n            this.codeElement.text(output);\n            this.outputElement.show();\n        }\n    }\n\n    onLoginRegister() {\n        this.clearErrors();\n        const email = this.emailElement.val();\n        const password = this.passwordElement.val();\n\n        if (!email || email === '') {\n            this.raiseError('email not valid');\n            return false;\n        }\n\n        if (!password || password === '') {\n            this.raiseError('password not valid');\n            return false;\n        }\n\n        this.client.init({ email, password }, (err, response) => {\n            if (err) {\n                this.raiseError(extractError(err));\n            } else {\n                this.userId = response.result.user_id;\n\n                // analytics.identify(this.userId);\n                this.identify(this.userId);\n\n                this.provisionElement.show();\n                this.loginElement.hide();\n            }\n        });\n\n\n        return false;\n    }\n\n    onSetup() {\n        this.clearErrors();\n\n        this.loadElement.show();\n        this.errorElement.hide();\n        this.statusElement.empty();\n\n        ProvisionAccount(this.client, this.userId, this.onProvisionSuccess.bind(this), this.displayStatus.bind(this));\n\n        return false;\n    }\n\n    identify(id) {\n        const analyticsData = {\n            type: 'identify',\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\n            context: {\n                library: {\n                    name: 'PubNub Functions',\n                    version: '0.0.1'\n                },\n                page: {\n                    path: location.pathname,\n                    url: location.href,\n                    title: document.title,\n                    search: location.search,\n                    referrer: document.referrer\n                },\n                userAgent: navigator.userAgent\n            },\n            userId: id\n        };\n        $.ajax({\n            type: 'POST',\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\n            data: JSON.stringify(analyticsData),\n            contentType: 'application/json; charset=utf-8'\n        });\n    }\n\n    track(event) {\n        const analyticsData = {\n            type: 'track',\n            anonymousId: document.cookie.substring(document.cookie.indexOf('=') + 4, document.cookie.indexOf(';') - 3),\n            event: event,\n            context: {\n                library: {\n                    name: 'PubNub Functions',\n                    version: '0.0.1'\n                },\n                page: {\n                    path: location.pathname,\n                    url: location.href,\n                    title: document.title,\n                    search: location.search,\n                    referrer: document.referrer\n                },\n                userAgent: navigator.userAgent\n            },\n            userId: this.userId\n        };\n        $.ajax({\n            type: 'POST',\n            url: 'https://pubsub.pubnub.com/v1/blocks/sub-key/sub-c-218ba154-c8ba-11e7-9178-bafd478c18bc/analytics',\n            data: JSON.stringify(analyticsData),\n            contentType: 'application/json; charset=utf-8'\n        });\n    }\n\n};\n"},{"id":5,"identifier":"/Users/ian/Development/chat-engine/node_modules/webpack/buildin/global.js","name":"(webpack)/buildin/global.js","index":4,"index2":1,"size":488,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":2,"building":6},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"global","loc":"1:0-44"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3,"source":"var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"},{"id":6,"identifier":"ignored /Users/ian/Development/chat-engine/node_modules/es6-promise/dist vertx","name":"vertx (ignored)","index":5,"index2":2,"size":15,"cacheable":true,"built":false,"optional":true,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","issuerId":3,"issuerName":"./node_modules/es6-promise/dist/es6-promise.js","profile":{"factory":0,"building":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"/Users/ian/Development/chat-engine/node_modules/es6-promise/dist/es6-promise.js","module":"./node_modules/es6-promise/dist/es6-promise.js","moduleName":"./node_modules/es6-promise/dist/es6-promise.js","type":"cjs require","userRequest":"vertx","loc":"138:16-26"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":3},{"id":7,"identifier":"/Users/ian/Development/chat-engine/setup/src/client.js","name":"./setup/src/client.js","index":6,"index2":5,"size":2922,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":5,"building":8},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./client","loc":"4:15-34"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"module.exports = class {\n\n    constructor(options) {\n        options = options || {};\n\n        this.endpoint = options.endpoint || 'https://admin.pubnub.com';\n        this.session = options.session || false;\n        this.debug = options.debug || false;\n    }\n\n    errHandle(text) {\n        if (this.debug) {\n            console.error('API Error: ' + text);\n        }\n    }\n\n    clog(input) {\n        if (this.debug) {\n            if (typeof (input) === 'object') {\n                console.log(input);\n            } else {\n                console.log('API:'.yellow, input);\n            }\n        }\n    }\n\n    request(method, url, opts, holla) {\n\n        if (url[1] !== 'me' && !this.session) {\n            return this.errHandle('Authorize with init() first.');\n        }\n\n        opts = opts || {};\n\n        opts.url = this.endpoint + '/' + url.join('/');\n        opts.method = method;\n\n        opts.json = true;\n        opts.headers = opts.headers || {};\n        // opts.headers.Authorization =\n        //     'Basic cHVibnViLWJldGE6YmxvY2tzMjAxNg===';\n\n        if (this.session) {\n            opts.headers['X-Session-Token'] = this.session;\n        }\n\n        // clog('-- URL:'.yellow);\n        this.clog(opts.method.red + ' ' + opts.url);\n        this.clog('-- opts:'.yellow);\n        this.clog(opts);\n\n        $.ajax(opts)\n            .done((data) => {\n                console.log(data);\n                holla(null, data);\n            })\n            .fail((data) => {\n                console.log('fail', data);\n                holla(data || data.message || data);\n            });\n    }\n\n    init(input, holla) {\n        this.request('post', ['api', 'me'], {\n            data: {\n                email: input.email || this.errHandle('No Email Supplied'),\n                password: input.password || this.errHandle('No Password Supplied')\n            }\n        }, (err, body) => {\n            if (body && body.error) {\n                holla(body.error);\n            } else if (err) {\n                holla(err);\n            } else {\n                this.session = body.result.token;\n                holla(null, body);\n            }\n        });\n    }\n\n    /* shortcuts to avoid pollution of executors */\n    startFunction({ block, key }, callback) {\n        this.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block', block.id, 'start'], {\n            data: {\n                block_id: block.id,\n                key_id: key.id,\n                action: 'start'\n            }\n        }, callback);\n    }\n\n    storeSecretKey({ key }, callback) {\n        this.request('put', ['api', 'vault', key.subscribe_key, 'key', 'secretKey'], {\n            contentType: 'application/json',\n            data: JSON.stringify({\n                keyName: 'secretKey',\n                key_id: key.id,\n                subscribeKey: key.subscribe_key,\n                value: key.secret_key\n            })\n        }, callback);\n    }\n\n};\n"},{"id":8,"identifier":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","name":"./setup/src/setup_account.js","index":7,"index2":8,"size":3177,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/script.js","issuerId":1,"issuerName":"./setup/src/script.js","profile":{"factory":6,"building":8,"dependencies":1},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/script.js","module":"./setup/src/script.js","moduleName":"./setup/src/script.js","type":"cjs require","userRequest":"./setup_account","loc":"5:25-51"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":1,"source":"const ProvisionBlocks = require('./setup_blocks.js');\nconst utils = require('./utils');\n\nmodule.exports = (api, userId, callback = () => {}, status = () => {}) => {\n    api.request('get', ['api', 'accounts'], {\n        data: {\n            user_id: userId\n        }\n    }, (err, response) => {\n\n        if (err) {\n            const defaultMessage = 'Could not get PubNub accounts. Please contact support@pubnub.com.';\n            return utils.callbackWithError(err, defaultMessage, callback);\n        }\n\n        let account = response.result.accounts[0];\n\n        status('Using account ' + account.properties.company + ', if this is incorrect, deploy manually or log in as another user');\n        status('Creating new PubNub app...');\n\n        api.request('post', ['api', 'apps'], {\n            data: {\n                name: 'ChatEngine App',\n                owner_id: account.id,\n                properties: {}\n            }\n        }, (err, response) => {\n            if (err) {\n                const defaultMessage = 'Could not create new PubNub app. Please contact support@pubnub.com.';\n                return utils.callbackWithError(err, defaultMessage, callback);\n            }\n\n            let app = response.result;\n\n            status('Getting PubNub keys...');\n\n            api.request('get', ['api', 'apps'], {\n                data: {\n                    owner_id: account.id\n                }\n            }, (err, response) => {\n                if (err) {\n                    const defaultMessage = 'Could not get PubNub keys. Please contact support@pubnub.com.';\n                    return utils.callbackWithError(err, defaultMessage, callback);\n                }\n\n                let apps = response.result;\n                let key;\n\n                apps.forEach((item) => {\n                    if (item.id === app.id) {\n                        key = item.keys[0];\n                    }\n                });\n\n                status('Enabling PubNub features...');\n\n                key.properties.name = 'ChatEngine Keyset';\n                key.properties.presence = 1;\n                key.properties.history = 1;\n                key.properties.message_storage_ttl = 7;\n                key.properties.multiplexing = 1;\n                key.properties.presence_announce_max = 20;\n                key.properties.presence_debounce = 2;\n                key.properties.presence_global_here_now = 1;\n                key.properties.presence_interval = 10;\n                key.properties.presence_leave_on_disconnect = 0;\n                key.properties.blocks = 1;\n                key.properties.uls = 1;\n                key.properties.wildcardsubscribe = 1;\n\n                api.request('put', ['api', 'keys', key.id], {\n                    data: key\n                }, (err) => {\n                    if (err) {\n                        const defaultMessage = 'Could not enable PubNub features. Please contact support@pubnub.com.';\n                        return utils.callbackWithError(err, defaultMessage, callback);\n                    }\n\n                    ProvisionBlocks(api, userId, key, callback, status);\n\n                });\n            });\n        });\n    });\n};\n"},{"id":9,"identifier":"/Users/ian/Development/chat-engine/setup/src/setup_blocks.js","name":"./setup/src/setup_blocks.js","index":8,"index2":7,"size":4466,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","issuerId":8,"issuerName":"./setup/src/setup_account.js","profile":{"factory":2,"building":10,"dependencies":0},"failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":8,"moduleIdentifier":"/Users/ian/Development/chat-engine/setup/src/setup_account.js","module":"./setup/src/setup_account.js","moduleName":"./setup/src/setup_account.js","type":"cjs require","userRequest":"./setup_blocks.js","loc":"1:24-52"}],"usedExports":true,"providedExports":null,"optimizationBailout":[],"depth":2,"source":"const utils = require('./utils');\n\nmodule.exports = (api, userId, key, callback = () => {}, status = () => {}) => {\n\n    let block = null;\n\n    status('Creating new PubNub Function...');\n\n    let startPubNubFunction = () => {\n        status('Starting Pubnub Function...');\n\n        api.startFunction({ block, key }, (err) => {\n            if (err) {\n                const defaultMessage = 'Could not start PubNub Function. Please contact support@pubnub.com.';\n                return utils.callbackWithError(err, defaultMessage, callback);\n            }\n\n            status('Success!');\n\n            callback(null, {\n                pub: key.publish_key,\n                sub: key.subscribe_key\n            });\n\n        });\n    };\n\n    let onCodeFetch = (stateCodeResult, authCodeResult, functionCodeResult) => {\n        status('Creating new after-publish Event Handler...');\n\n        api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\n            data: {\n                key_id: key.id,\n                block_id: block.id,\n                type: 'js',\n                event: 'js-after-presence',\n                channels: '*',\n                name: 'chat-engine-state',\n                code: stateCodeResult[0],\n                output: 'output-state-to-kv-' + (new Date()).getTime()\n            }\n        }, (err, response) => {\n            if (err) {\n                const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\n                return utils.callbackWithError(err, defaultMessage, callback);\n            }\n\n            api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\n                data: {\n                    key_id: key.id,\n                    block_id: block.id,\n                    type: 'js',\n                    event: 'js-on-rest',\n                    path: 'chat-engine-auth',\n                    name: 'chat-engine-auth',\n                    code: authCodeResult[0],\n                    output: 'auth-' + Math.round((new Date()).getTime())\n                }\n            }, (err, response) => {\n                if (err) {\n                    const defaultMessage = 'Could not create new PubNub after-publish Event Handler. Please contact support@pubnub.com.';\n                    return utils.callbackWithError(err, defaultMessage, callback);\n                }\n\n                status('Creating new on-request Event Handler...');\n\n                functionCodeResult[0] = functionCodeResult[0].replace('SECRET_KEY', key.secret_key);\n\n                api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'event_handler'], {\n                    data: {\n                        key_id: key.id,\n                        block_id: block.id,\n                        code: functionCodeResult[0],\n                        type: 'js',\n                        name: 'chat-engine-server',\n                        path: 'chat-engine-server',\n                        event: 'js-on-rest',\n                        output: 'output-server-endpoint-' + Math.round((new Date()).getTime())\n                    }\n                }, (err, response) => {\n                    if (err) {\n                        const defaultMessage = 'Could not create new Pubnub on-request Event Handler. Please contact support@pubnub.com.';\n                        return utils.callbackWithError(err, defaultMessage, callback);\n                    }\n\n                    startPubNubFunction();\n                });\n            });\n        });\n    };\n\n    api.request('post', ['api', 'v1', 'blocks', 'key', key.id, 'block'], {\n        data: {\n            name: 'ChatEngine Function',\n            key_id: key.id\n        }\n    }, (err, response) => {\n\n        if (err) {\n            const defaultMessage = 'Could not create new PubNub Function. Please contact support@pubnub.com.';\n            return utils.callbackWithError(err, defaultMessage, callback);\n        }\n\n        block = response.payload;\n\n        let stateCodeFetch = $.get({ url: 'functions/state-to-kv.js', dataType: 'text' });\n        let authCodeFetch = $.get({ url: 'functions/auth.js', dataType: 'text' });\n        let functionsCodeFetch = $.get({ url: 'functions/server.js', dataType: 'text' });\n\n        $.when(stateCodeFetch, authCodeFetch, functionsCodeFetch)\n            .then(onCodeFetch)\n            .catch(() => {\n                status('Failed to fetch code');\n            });\n    });\n};\n"}],"filteredModules":3,"children":[]}